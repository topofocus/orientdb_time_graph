#!/usr/bin/env ruby
## loads the active-orient environment 
## and starts an interactive shell
## Parameter:  production (p)
##	       development (d)  [default]
##	       test (t)
require 'bundler/setup'
require_relative '../lib/orientdb_time_graph'
require_relative '../lib/setup'
require 'logger'
require 'pastel'
LogLevel = Logger::INFO

p =  Pastel.new
c =  p.bright_white.bold.on_yellow.detach
g =  p.green.on_black.detach

#require File.expand_path(File.dirname(__FILE__) + "/../config/boot")

specified_environment = ARGV[0] || 'D'
env =  case specified_environment[-1].upcase
				 when  'P'
					 :production
				 when 'D'
					 :development
				 else
					 :test
				 end
module TG; end
TG.setup env

	ActiveOrient::Init.define_namespace  namespace: :object 
	ActiveOrient::Model.keep_models_without_file = true
	ActiveOrient::Model.keep_models_without_file = true
	ActiveOrient::OrientDB.new  preallocate: true 


#TG.check_and_initialize ORD
  
 #require 'orientdb' if RUBY_PLATFORM == 'java'
 require 'yaml'

class Array
	# Method missing enables fancy stuff like
	# Jahr[2000 .. 2005].monat(5..7).value 
	#
	# its included only in the console, for inspection purposes

  def method_missing(method, *key)
    unless method == :to_hash || method == :to_str #|| method == :to_int
      return self.map{|x| x.public_send(method, *key)}
    end

  end
end # Array


puts '-'* 45
ns= case ActiveOrient::Model.namespace 
  when Object
    "No Prefix, just ClassName#CamelCase"
    else
     ActiveOrient::Model.namespace.to_s + "{ClassName.camelcase}"
    end
puts "Namespace for model-classes : #{ns}"
puts "Present Classes (Hierarchy) "

puts V.db.class_hierarchy.to_yaml
puts ActiveOrient::show_classes

include OrientDB

require 'irb'
ARGV.clear
IRB.start(__FILE__)
